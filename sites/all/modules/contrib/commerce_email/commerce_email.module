<?php

/**
 * @file
 * Defines additional menu item and order html email functonality.
 */

/**
 * Implements hook_menu().
 */
function commerce_email_menu() {
  $items = array();

  $items['admin/commerce/config/email'] = array(
    'title' => 'Emails',
    'description' => 'Administer commerce emails',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('variable_group_form', 'commerce_email'),
    'access arguments' => array('configure store'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 99,
  );

  return $items;
}

/**
 * Implements hook_enable()
 */
function commerce_email_enable() {
  // Make sure the rules created by commerce have been taken into account
  drupal_flush_all_caches();
  // Deactivate default commerce rules to send order email
  $rules_config = rules_config_load('commerce_checkout_order_email');
  $rules_config->active = FALSE;
  $rules_config->save();
  
  // Deactivate default commerce rules to create new account
  $rules_config = rules_config_load('commerce_checkout_new_account');
  $rules_config->active = FALSE;
  $rules_config->save();
  
  // Add the correct settings to Mail System
  mailsystem_set(array('variable_email' => 'HTMLMailSystem'));
}

/**
 * Implements hook_disable()
 */
function commerce_email_disable() {
  // Activate default commerce rules to send order email
  $rules_config = rules_config_load('commerce_checkout_order_email');
  $rules_config->active = TRUE;
  $rules_config->save();
  
  // Activate default commerce rules to create new account
  $rules_config = rules_config_load('commerce_checkout_new_account');
  $rules_config->active = TRUE;
  $rules_config->save();
  
  // Remove the settings from MailSystem
  mailsystem_clear(array('variable_email' => ''));
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function commerce_email_form_variable_group_form_alter(&$form, &$form_state) {
  if ($form_state['build_info']['args'][0] == 'commerce_email') {
    $form['tokens'] = array(
      '#markup' => theme('token_tree', array('token_types' => array('commerce-order', 'commerce-customer-profile'), '#global_types' => FALSE)),
      '#weight' => 99999
    );
  }
}

/**
 * Returns a rendered email of the commerce order
 * or an array of the order details
 *
 * @param $order
 *   The commerce order object
 *   
 * @param $theme
 * (optional) Defaults to FALSE
 *   Flag to return the contents of the order
 *   as a html table or an array
 *   
 * @return
 *   String containing the rendered order table
 *   or an array of the order
 */
function commerce_email_order_items($order, $theme=TRUE) {
  
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = number_format(commerce_currency_amount_to_decimal($wrapper->commerce_order_total->amount->value(), $currency_code), 2);

  $header = array(
    array('data' => t('Product'), 'style' => array('text-align: left;')),
    array('data' => t('Qty'), 'style' => array('text-align: left;')),
    array('data' => t('Price (@currency_code)', array('@currency_code' => $currency_code)), 'style' => array('text-align: left;'))
  );

  $rows = array();
  foreach ($wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    
    switch ($line_item_wrapper->type->value()) {
      case 'product':
        // Special treatment for a product, since we want to get the title from
        // from the product entity instead of the line item.
        $title = htmlentities($line_item_wrapper->commerce_product->title->value(), ENT_QUOTES, "UTF-8");
        $title .= commerce_email_order_item_attributes($line_item_wrapper->commerce_product->product_id->value());
        
        $rows[] = array(
          'data' => array(
            array('data' => $title, 'style' => array('text-align: left;')),
            array('data' => $line_item_wrapper->quantity->value(), 'style' => array('text-align: left;')),
            array('data' => number_format(commerce_currency_amount_to_decimal($line_item_wrapper->commerce_unit_price->amount->value(), $currency_code), 2), 'style' => array('text-align: left;')),
          )
        );
        break;
      default:
        // Use this for any other line item.
        $rows[] = array(
          'data' => array(
            array('data' => htmlentities($line_item_wrapper->line_item_label->value(), ENT_QUOTES, "UTF-8"), 'style' => array('text-align: left;')),
            array('data' => 1, 'style' => array('text-align: left;')),
            array('data' => number_format(commerce_currency_amount_to_decimal($line_item_wrapper->commerce_unit_price->amount->value(), $currency_code), 2), 'style' => array('text-align: left;')),
          )
        );
        break;
    }
  }
  
  $data = $wrapper->commerce_order_total->data->value();
  if (!empty($data['components'])) {
    
    foreach ($data['components'] as $key => &$component) {
      
      if ($data['components'][$key]['name'] == 'base_price') {
        $rows[] = array(
          'data' => array(
            ' ',
            array('data' => t('Subtotal:'), 'style' => array('font-weight: bold; text-align: right;')),
            array('data' => number_format(commerce_currency_amount_to_decimal($data['components'][$key]['price']['amount'], $currency_code), 2), 'style' => array('font-weight: bold; text-align: left;')),
          )
        );
      }
      elseif (preg_match('/^tax\|/', $data['components'][$key]['name'])) {
        $rows[] = array(
          'data' => array(
            ' ',
            array('data' => $data['components'][$key]['price']['data']['tax_rate']['display_title'] . ':', 'style' => array('font-weight: bold; text-align: right;')),
            array('data' => number_format(commerce_currency_amount_to_decimal($data['components'][$key]['price']['amount'], $currency_code), 2), 'style' => array('font-weight: bold; text-align: left;')),
          )
        ); 
      }
    }
  }

  $rows[] = array(
    'data' => array(
      ' ',
      array('data' => t('Total:'), 'style' => array('font-weight: bold; text-align: right;')),
      array('data' => $amount, 'style' => array('font-weight: bold; text-align: left;')),
    )
  );

  if ($theme) {
    return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('style' => array('width: 50%; border: 1px solid #ddd;'))));
  }
  else {
    return array('header' => $header, 'rows' => $rows, 'attributes' => array('style' => array('width: 50%; border: 1px solid #ddd;')));
  }
}

/**
 * Returns the labels and values of any attributes 
 * selected on the product.
 *
 * @param $product_id
 *   A commerce product id
 *   
 * @return
 *   String containing the attributes
 */
function commerce_email_order_item_attributes($product_id) {

  $product = commerce_product_load($product_id);
  $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
  
  $instances = field_info_instances('commerce_product', $product->type);
  $attr = array();
  foreach ($instances as $name => $instance) {
    $commerce_cart_settings = commerce_cart_field_instance_attribute_settings($instance);
    if ($commerce_cart_settings['attribute_field'] == 1) {
      $field = field_info_field($instance['field_name']);
      if (!empty($product_wrapper->$field['field_name']->value()->name)) {
        $attr[] = htmlentities($instance['label'] . ': ' . $product_wrapper->$field['field_name']->value()->name, ENT_QUOTES, "UTF-8");
      }
    }
  }
  
  $title_attr = '';
  if (!empty($attr)) {
    $title_attr .= '<br /><em>' . join("<br />", $attr) . '</em>';
  }
  
  return $title_attr;
}
